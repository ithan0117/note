完整範例 : https://www.mkyong.com/spring3/spring-objectxml-mapping-example/
簡述
	OXM : Object / XML Mapping
	marshall : 將Object轉成XML檔案
	unmarshall : 將XML檔案轉成Object

必要jar檔
	spring-oxm-x.y.z.RELEASE.jar
	castor-x.y.jar
	xercesImpl-x.y.z.jar
	
範例

step1. 加入jar檔
	1. spring-core
	2. spring-context
	3. spring-oxm
	4. castor
	5. xercesImpl
	
	Maven
		<properties>
			<spring.version>3.0.5.RELEASE</spring.version>
		</properties>

		<dependencies>
			<!-- Spring 3 dependencies -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-core</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-context</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- spring oxm -->
			<dependency>
				<groupId>org.springframework</groupId>
				<artifactId>spring-oxm</artifactId>
				<version>${spring.version}</version>
			</dependency>

			<!-- Uses Castor for XML -->
			<dependency>
				<groupId>org.codehaus.castor</groupId>
				<artifactId>castor</artifactId>
				<version>1.2</version>
			</dependency>

			<!-- Castor need this -->
			<dependency>
				<groupId>xerces</groupId>
				<artifactId>xercesImpl</artifactId>
				<version>2.8.1</version>
			</dependency>
		</dependencies>
		
step2. 撰寫pojo類別

step3. 撰寫Converter類別
	public class OXMConverter {
		private Marshaller marshaller;
		private Unmarshaller unmarshaller;

		//.. marshaller and unmarshaller setter/getter here

		public void convertFromObjectToXML(Object object, String filepath) throws IOException {
			try(FileOutputStream fos = new FileOutputStream(filepath)){
				marshaller.marshal(object, new StreamResult(fos));
			} catch(Exception e) {
				e.printStackTrace();
			}
		}

		public Object convertFromXMLToObject(String xmlfile) throws IOException {
			try(FileInputStream fis = new FileInputStream(xmlfile)){
				return unmarshaller.unmarshal(new StreamSource(is));
			} catch(Exception e) {
				e.printStackTrace();
			}
		}

	}
	
step4. 撰寫Spring設定檔
	<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

		<!-- 宣告Spring內建的CastorMarshaller -->
		<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller">
			<property name="targetClasses">
				<array>
					<value>model.entity.Member</value> <--unmarshall用到的類別, 需在此註冊 (若marshall後, 無重啟程式, 馬上unmarshall的話就不需註冊)
					<value>x.y.ClassName</value>
				</array>
			</property>
		</bean>
		
		<!-- 宣告自己寫好的Converter -->
		<bean id="oxmConverter" class="xxx.yyy.OXMConverter">
			<property name="marshaller" ref="castorMarshaller" />	<--注入castorMarshaller
			<property name="unmarshaller" ref="castorMarshaller" />	<--注入castorMarshaller
		</bean>	

	</beans>
	
step5.(非必要) 撰寫映射定義檔
	*註 : 預設狀況下, 每個pojo的性質都會輸出成xml的元素(element),
		  可經由映射定義檔自訂, 將pojo的性質輸出成xml的"屬性"(attribute)
		  
	<mapping>
		<class name="套件.POJO類別名">
			<map-to xml="映射xml的根元素" />
			
			<!-- <field name="POJO的性質1" type="基本資料型態或類別全名">
				<bind-xml name="映射xml的名稱1" node="element或attribute" />
			</field> -->
			
			<field name="POJO的性質2" type="基本資料型態或類別全名">
				<bind-xml name="映射xml的名稱2" node="element或attribute" />
			</field>
			
			...
		</class>
	</mapping>
step6. (非必要) 在Spring設定檔設定指向映射定義檔
	...
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller">
		...
		<property name="mappingLocation" value="classpath:路徑加檔名" />	<--指向映射定義檔
	</bean>













