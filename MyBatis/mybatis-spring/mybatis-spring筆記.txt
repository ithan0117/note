實作步驟
	0. Dynamic Web Project、mybatis、spring基本設定

	1. 加入jar檔
		手動 : mybatis-spring-x.y.z.jar
		
		Maven
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>x.y.z</version>
			</dependency>
			
	2. 指定載入MyBatis-Spring組態檔 : 開啟WEB-INF/web.xml  在<param-value>內加入
		<context-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>
				classpath:applicationContext-core.xml, 	<--逗號注意
				classpath:applicationContext-mybatis.xml
			</param-value>
		</context-param>

	3. 建立MyBatis-Spring組態檔 : 在resource資料下, 新增applicationContext-mybatis.xml
		*註 : 組態檔管理的良好習慣 : 利用Source Folder
	
	4. 撰寫MyBatis-Spring組態檔
		4.1 引用xsd
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:schemaLocation="http://www.springframework.org/schema/beans
					http://www.springframework.org/schema/beans/spring-beans-3.0.xsd ">

				<description>MyBatis-Spring</description>
			</beans>

		4.2 宣告SqlSessionFactoryBean
			*註 : 一般習慣<settings>跟<typeAliases>放在mybatis組態檔裡, 其餘全搬至spring組態檔裡
		
			方式1 : 直接引用mybatis-config.xml及xxxMapper.xml
				<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
					<property name="dataSource" ref="dataSource" />
					<property name="configLocation" value="classpath:mybatis-config.xml" />		<--指定MyBatis組態檔(mybatis-config.xml). xxxMapper.java跟xxxMapper.xml不同位置時才需指定
					<property name="mapperLocations">											<--指定映射檔位置(xxxMapper.xml)
						<array>
							<value>classpath:xxx/mapper/*.xml</value>
							<value>...</value>
						</array>
					</property>
				</bean>

	
			方式2 : 將原mybatis-config.xml設定寫到applicationContext-mybatis.xml裡
				<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
					<property name="dataSource" ref="dataSource" />
					<property name="configuration">
						<bean class="org.apache.ibatis.session.Configuration">
							<property name="mapUnderscoreToCamelCase" value="true"/>
							<property name="logImpl" value="org.apache.ibatis.logging.stdout.StdOutImpl"/>
						</bean>
					</property>
					<property name="typeAliases" value="java.sql.Timestamp" />
					<property name="typeAliasesPackage" value="sys1.model.pojo;sys2.model.pojo" />	<--不可用萬用字元
					<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
				</bean>

		4.3 Mapper實例化
			方式1 : 一一宣告
				<bean id="memberMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">		<--此處類別不是用自訂的xxxMapper
					<property name="mapperInterface" value="model.mapper.MemberMapper" />			<--自訂的xxxMappery在此處指定
					<property name="sqlSessionFactory" ref="sqlSessionFactory" />					<--對應到步驟4.2所宣告的SqlSessionFactory名稱
				</bean>
			
				<bean ....>
	
			方式2 : 使用MapperScannerConfigurer掃描
				<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">				
					<property name="basePackage" value="*.model.mapper " />							<--指定Mapper.java的套件
					<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
				</bean>

---------------------------------------------------------------------------------------------------------------------------------------------------
筆記
	簡介
		1. 非官方API, 由MyBatis Community開發
		2. 版本需求
			JDK : 5+
			
			mybatis-spring		MyBatis			Spring
			-------------------------------------------
			1.0.0 / 1.0.1		3.0.1~3.0.5		3.0.0+
			1.0.2				3.0.6			3.0.0+
			1.1.0				3.1.0+			3.0.0+
			
			註 : 目前穩定版 : 1.2.2, 最新版 : 1.3.2

	SqlSessionFactoryBean
		說明 : 在MyBatis裡使用SqlSessionFactoryBuilder產生Session, 而在MyBatis-Spring裡則使用SqlSessionFactoryBean, 	
			宣告一個SqlSessionFactoryBean實際動作如下…
				SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
				SqlSessionFactory sessionFactory = factoryBean.getObject();
				
		性質
			序	名稱						說明									備註
			----------------------------------------------------------------------------------------------------------------------
			 1	dataSource					指定資料源物件					為必要設定
			 2	configLocation				指定mybatis組態檔位置
			 3	mapperLocations				指定mapper映射檔位置
			 4	transactionFactory			指定交易工廠						預設為SpringManagedTransactionFactory
			 5	configurationProperties		
			 6	sqlSessionFactoryBuilder	指定SqlSession工廠的建立者		一般不指定此性質
			 7	environment					
			 8	failFast					
			 9	plugins						指定攔截器(Interceptor)			指定TypeHandler
			10	typeHandlers				指定TypeHandler					用來處理不支援或非標準的資料型態
			11	typeHandlersPackage
			12	typeAliases					指定別名
			13	typeAliasesPackage			
			14	typeAliasesSuperType
			15	databaseIdProvider			指定資料庫ID提供者
			16	objectFactory				指定物件產生工廠					一般不指定此性質 (mybatis用此物件建立新的物件實例)
			17	objectWrapperFactory		
			18	configuration				指定組態類別						參數為MyBatis的Configuration, 細節設定在MyBatis筆記
			19	cache
	
	組態檔
		1. 寫在mybatis-config.xml裡的<environments>會被"忽略", spring只用自己的自己的環境相關設定


	交易控制
		Spring Standard : 使用Spring的交易管理者
			<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
				<property name="dataSource" ref="dataSource" />
			</bean>
		
		CMT(Container Managed Transactions) : 使用容器的交易管理
			Step
				1. <tx:jta-transaction-manager />
				2.
					<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
  						<property name="dataSource" ref="dataSource" />
  						<property name="transactionFactory">	<--設定交易管理方式
    							<bean class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory" />	<--指定為MyBatis基本交易管理
  						</property>  
					</bean>

		Programmatic Managed Transactions : 自訂交易控制 (參閱Spring 10.6)
			範例
				DefaultTransactionDefinition def = new DefaultTransactionDefinition();
				def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);

				TransactionStatus status = txManager.getTransaction(def);
				try {
					userMapper.insertUser(user);
				} catch (MyException ex) {
  					txManager.rollback(status);
  					throw ex;
				}
				txManager.commit(status);

		*注意 : 當交易控制交給Spring後, 不可call SqlSession.commit()、SqlSession.rollback()、SqlSession.close()等方法, 否則拋出UnsupportedOperationException


	SqlSessionTemplate
		說明 : MyBatis-Spring的核心, 實作SqlSession介面, 可被共享使用, 功用如下
			1. 負責管理SqlSession
			2. 呼叫SQL方法
			3. 翻譯Exception
			細述 : 確保從映射器getMapper()傳回之SQL方法, 與當前Spring為相關; 另外管理Session的生命週期, 如commit()、rollback()、close()
			一般用途 : 取代MyBatis預設的SqlSession

		用法
			<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
				<constructor-arg index="0" ref="sqlSessionFactory"/>	<--指定注入SqlSessionFactory
				<constructor-arg index="1" value="BATCH"/>	<-- 支持批量操作
			</bean>

		補充 : DAO類別特殊寫法, 步驟
			1. 在Spring中宣告SqlSessionTemplate (如上)
			2. 建立DAO實作類別, ex..
				public class TestDAO {
					private SqlSession sqlSession;
	
					public void setSqlSession(SqlSession sqlSession) {
						this.sqlSession = sqlSession;
					}
	
					@Override
					public Member getMember(Integer id) {
						return (Member) sqlSession.selectOne("model.mapper.MemberMapper.selectByKey", id);	<--指定呼叫的SQL方法及參數
					}
	
				}
			3. 萃取出IDAO
			4. 在Spring中宣告DAO物件

	映射器(Mapper)
		註
			如果映射器(XxxMapper.java)跟映射檔(XxxMapper.xml)在同路徑下, 則MapperFactoryBean會"自動解析""

		註冊單個映射器 - MapperFactoryBean
			<bean id="userMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
				<property name="mapperInterface" value="套件.XxxMapper" />
				<property name="sqlSessionFactory" ref="sqlSessionFactory" />
			</bean>
		
			等同in Java..
			@Bean
			public SqlSessionFactory sqlSessionFactory() throws Exception {
				SqlSessionFactoryBean sqlSessionFactory = new SqlSessionFactoryBean();
				sqlSessionFactory.setDataSource(dataSource());
				return (SqlSessionFactory) sqlSessionFactory.getObject();
			}

			@Bean
			public UserMapper userMapper() throws Exception {
				SqlSessionTemplate sessionTemplate = new SqlSessionTemplate(sqlSessionFactory());//必須用SqlSessionTemplate, 不可用SqlSession
				return sessionTemplate.getMapper(UserMapper.class);
			}

		掃描多個映射器
			使用
				方式1 : 使用映射器掃描配置者 - MapperScannerConfigurer, 在Spring XML中宣告..
					<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
						<property name="basePackage" value="映射器所在套件" />	<-可設多個路徑(用分號或逗號隔開)
						<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />	<-若要指定SqlSessionFactory時才需設定此屬性
					</bean>

				方式2 : 使用MyBatis-Spring標籤, 在Spring XML中..
					<beans ...
						xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
						xsi:schemaLocation="...
							http://mybatis.org/schema/mybatis-spring
							http://mybatis.org/schema/mybatis-spring.xsd">

						<mybatis:scan base-package="映射器所在套件" /> <-可設多個套件(用分號或逗號隔開)
					*註 :
						1. Multi-DataSource時, 需指定SqlSessionFactory或SqlSessionTemplate, ex..
							<mybatis:scan base-package="映射器所在套件" factory-ref="sqlSessionFactory" />
							或
							<mybatis:scan base-package="映射器所在套件" template-ref="sqlSessionTemplate" />

						2. Filtering property
							annotation : specifies an annotation to search for
							marker-interface : specifies a parent interface to search for

				方式3 : 使用@MapperScan註釋, 若Spring設定是用Java撰寫, 則可在Java中加上..
					@Configuration
					@MapperScan("映射器所在套件")
					public class AppConfig {

  						@Bean
						public DataSource dataSource() {
							return new EmbeddedDatabaseBuilder().addScript("schema.sql").build()
						}

						@Bean
						public SqlSessionFactory sqlSessionFactory() throws Exception {
							SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
							sessionFactory.setDataSource(dataSource());
							return sessionFactory.getObject();
						}
					}

			映射器在Spring裡的命名
				預設 : 使用Spring bean預設的方式命名, 所以若有不同套件, 但同介面名的映射器, 會發生衝突BeanDefinitionStoreException
					*註 : 預設的命名方式ex.. MemberMapper -> memberMapper

				自行命名
					步驟1 : 在映射器加上@Component, 並自訂名稱(或@Named, 也可自訂註釋)
						*註
							1. @Named : JSR下的註釋
							2. 自訂註釋的範例
								@Retention(RetentionPolicy.RUNTIME)
								@Target(ElementType.TYPE)
								public @interface Mapper {
									String value() default "";
								}

					步驟2 : Spring文件中加上..
						<mybatis:scan base-package="映射器所在套件"
							annotation="org.springframework.stereotype.Component" />	<--指定掃描的註釋, 若使用@Named則改為javax.inject.Named
															   若使用自訂註釋, 則改為自訂註釋的全名

	Batch
		說明 : MyBatis-Spring-1.1.0後提供三個類別, 用以建立Spring Batch
		
		三個類別
			1. MyBatisPagingItemReader : 分頁讀取器
			2. MyBatisCursorItemReader : 游標讀取器 (游標 : Cursor)
			3. MyBatisBatchItemWriter : 

		MyBatisPagingItemReader
			功能 : 在SELECT大量資料時做分頁處理. 利用pageSize設定, 每次只SELECT需要的資料. 若有已SELECT出, 但未從Reader中取出的資料, 則會一直放在Reader(記憶體)裡, 等待下次取出
			
			建立步驟
				1. 撰寫對應的SELECT方法
					1.1 xxxMapper.xml
						<select id="selectByReader1" resultMap="MemberMap">
							SELECT * FROM MEMBER ORDER BY ID
							LIMIT #{_skiprows}, #{_pagesize}		<--全小寫注意
						</select>
						
					1.2 xxxMapper.java
						List<Member> selectByReader1();//參數不用加上_skiprows及_pagesize
	
				2. 宣告分頁讀取器
					<bean id="reader1" class="org.mybatis.spring.batch.MyBatisPagingItemReader">
						<property name="sqlSessionFactory" ref="sqlSessionFactory" />	<--注入SqlSessionFactory
						<property name="queryId" value="selectByReader1" />				<--指定步驟1定義的SELECT方法名稱
						<property name="pageSize" value="10" />							<--設定分頁大小
<!-- 					<property name="parameterValues"> -->							<--若有其他參數(ex. WHERE條件), 則另用此性值設定
<!-- 						<map> -->													<--型態為Map
<!-- 							<entry key="k1" value="v1" /> -->
<!-- 							<entry key="k2" value="v2" /> -->
<!-- 						</map> -->
<!-- 					</property> -->
					</bean>
					
				3. 使用分頁讀取器
					@Autowired
					private MyBatisPagingItemReader<Member> reader1;		<--注入分頁讀取器
				
					@RequestMapping("readerTest1")
					public String readerTest1(Model model) throws Exception {
						List<Member> memberList = new ArrayList<>();
						Member member;
						for (int i = 0; i < reader.getPageSize(); i++) {	<--取得分頁大小
							if ((member = reader.read()) == null) {
								reader.close();								<--如果已經讀到底了就重置
								i = -1;
							} else {
								memberList.add(member);
							}
						}
						model.addAttribute("members", memberList);
						return "result";
					}

		MyBatisCursorItemReader
			功能 : 
			
			建立步驟
				1. 撰寫對應的SELECT方法
					1.1 xxxMapper.xml
						<select id="selectByReader2" resultMap="MemberMap">
							SELECT * FROM MEMBER ORDER BY ID
							ORDER BY ID
						</select>
						
					1.2 xxxMapper.java
						List<Member> selectByReader2();
				
				2. 宣告游標讀取器
					*註 : MyBatisCursorItemReader需要先執行open方法(初始化)才能使用
					<bean id="reader2" class="org.mybatis.spring.batch.MyBatisCursorItemReader">	<--宣告游標讀取器
						<property name="sqlSessionFactory" ref="sqlSessionFactory" />
						<property name="queryId" value="model.mapper.MemberMapper.selectByReader2" />
					</bean>
					
					<bean id="executionContext" class="org.springframework.batch.item.ExecutionContext" />	<--宣告ExecutionContext
	
					<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">	<--利用MethodInvokingFactoryBean, 執行MyBatisCursorItemReader.open(executionContext)
						<property name="targetObject" ref="reader2" />
						<property name="targetMethod" value="open" />
						<property name="arguments" ref="executionContext" />
					</bean>
					
				3. 使用游標讀取器
					@Autowired
					private MyBatisCursorItemReader<Member> reader2;
					@Autowired
					private ExecutionContext executionContext;
					
					@RequestMapping("readerTest2")
					public String readerTest2(Model model) throws Exception {
						List<Member> memberList = new ArrayList<>();
						Member member;
						if ((member = reader2.read()) == null) {
							reader2.close();
							reader2.open(executionContext);
						} else {
							memberList.add(member);
						}
						model.addAttribute("members", memberList);
						return "result";
					}
					
		MyBatisBatchItemWriter
			***
				1. SqlSessionFactory needs to be configured with a BATCH executor.
				2. MyBatis 3.2
				3. CompositeItemWriter 
				*****需先看懂Spring-Batch才能實作*****
				
			宣告批次寫出器
				<bean id="writer" class="org.mybatis.spring.batch.MyBatisBatchItemWriter">
					<property name="sqlSessionFactory" ref="sqlSessionFactory" />
					<property name="statementId" value="updateEmployee" />
				</bean>
		
		
		
		
		
		
		
		